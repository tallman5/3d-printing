[extruder]
microsteps: 16
# min_extrude_temp: 0
rotation_distance:  8.5
sensor_type: PT1000

# [extruder_stepper extruder1]
# dir_pin: PF10
# extruder:
# enable_pin: !PG2
# microsteps: 16
# rotation_distance:  8.67
# step_pin: PF9

# [extruder_stepper extruder2]
# dir_pin: PC1
# extruder:
# enable_pin: !PA0
# microsteps: 16
# rotation_distance:  8.67
# step_pin: PG4

[filament_switch_sensor fialment_sensor]
pause_on_runout: False
# Hall Effect
switch_pin: ^!PG11
# Micro switch
# switch_pin: PG11
runout_gcode:
    M600

[input_shaper]
shaper_freq_x: 83
shaper_type_x: 2hump_ei
shaper_freq_y: 53.6
shaper_type_y: 2hump_ei

[temperature_sensor chamber]
sensor_type: TDK NTCG104LH104JT1
sensor_pin: PF5

# [tmc2209 extruder]

# [tmc2209 extruder_stepper extruder1]
# interpolate: false
# run_current: 0.7
# uart_pin: PF2

# [tmc2209 extruder_stepper extruder2]
# interpolate: false
# run_current: 0.7
# uart_pin: PC7

#############################################################################################################
### Macros
#############################################################################################################

[gcode_macro _USER_START_PRINT_BED_MESH]
gcode:
  BED_MESH_CLEAR
  {% set bed_target = printer['heater_bed'].target|int %}
  {% set meshName = "mesh-" ~ bed_target|string %}
  RESPOND MSG="Looking for mesh {meshName}..." PREFIX=
  {% set allMeshes = printer["bed_mesh"].profiles %}
  {% if meshName in allMeshes %}
    RESPOND MSG="{meshName} found, loading..." PREFIX=
    BED_MESH_PROFILE LOAD={meshName}
  {% else %}
    RESPOND MSG="{meshName} not found, starting calibration..." PREFIX=
    BED_MESH_CALIBRATE PROFILE={meshName}
  {% endif %}
  RESPOND MSG="Mesh {meshName} ready." PREFIX=

# [gcode_macro ACTIVATE_EXTRUDER]
# description: Replaces built-in macro for a X-in, 1-out extruder configuration SuperSlicer fix
# rename_existing: ACTIVATE_EXTRUDER_BASE
# gcode:
#   {% if 'EXTRUDER' in params %}
#     {% set ext = params.EXTRUDER|default(EXTRUDER) %}
#     {% if ext == "extruder"%}
#       {action_respond_info("Switching to extruder0.")}
#       T0
#     {% elif ext == "extruder1" %}
#       {action_respond_info("Switching to extruder1.")}
#       T1
#     {% elif ext == "extruder2" %}
#       {action_respond_info("Switching to extruder2.")}
#       T2
#     {% else %}
#       {action_respond_info("EXTRUDER value being passed.")}
#       ACTIVATE_EXTRUDER_BASE EXTRUDER={ext}
#     {% endif %}
#   {% endif %}

[gcode_macro G32]
description: Runs home all, z tilt, home all
gcode:
  SAVE_GCODE_STATE NAME=STATE_G32
  G28
  Z_TILT_ADJUST
  G28
  RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro M600]
gcode:
    # M600: Filament Change. This macro will pause the printer
    # and move the tool to the change position.
    # After filament has been changed, the print can be resumed 
    # from its previous position with the "RESUME" gcode.

    {% set X = params.X|default(200)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(50)|float %}

    SAVE_GCODE_STATE NAME=M600_state
    PAUSE

    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    RESTORE_GCODE_STATE NAME=M600_state

# [gcode_macro T0]
# description: Deactivates ex 1 and 2, activates ex 0
# gcode:
#     SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
#     SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=
#     SYNC_EXTRUDER_MOTION EXTRUDER=extruder2 MOTION_QUEUE=

# [gcode_macro T1]
# description: Deactivates ex 0 and 2, activates ex 1
# gcode:
#     SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=
#     SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
#     SYNC_EXTRUDER_MOTION EXTRUDER=extruder2 MOTION_QUEUE=

# [gcode_macro T2]
# description: Deactivates ex 0 and 1, activates ex 2
# gcode:
#     SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=
#     SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=
#     SYNC_EXTRUDER_MOTION EXTRUDER=extruder2 MOTION_QUEUE=extruder

[gcode_macro DUMP_VARS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% endfor %}
   {% endfor %}

[gcode_macro DUMP_CONFIG_VARS]
gcode:
   {% for name1 in printer['configfile'].config %}
      #{% for name2 in printer[name1] %}
         { action_respond_info("printer['configfile'].%s" % (name1)) }
      #{% endfor %}
   {% endfor %}

[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  